/*
 * Overview
 * Fetch company/companies overview(s)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.roaring.example.companyinfo.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.roaring.example.companyinfo.invoker.JSON;

/**
 * Multiple response information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-11T11:07:20.642217455+01:00[Europe/Stockholm]", comments = "Generator version: 7.12.0")
public class ResponseInfo {
  public static final String SERIALIZED_NAME_HIT_COUNT = "hitCount";
  @SerializedName(SERIALIZED_NAME_HIT_COUNT)
  @javax.annotation.Nullable
  private Integer hitCount;

  public static final String SERIALIZED_NAME_NO_MATCH_IDS = "noMatchIds";
  @SerializedName(SERIALIZED_NAME_NO_MATCH_IDS)
  @javax.annotation.Nullable
  private List<String> noMatchIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_COUNT = "requestCount";
  @SerializedName(SERIALIZED_NAME_REQUEST_COUNT)
  @javax.annotation.Nullable
  private Integer requestCount;

  public ResponseInfo() {
  }

  public ResponseInfo hitCount(@javax.annotation.Nullable Integer hitCount) {
    this.hitCount = hitCount;
    return this;
  }

  /**
   * Number of companyIds in response (companyIds that could be found)
   * @return hitCount
   */
  @javax.annotation.Nullable
  public Integer getHitCount() {
    return hitCount;
  }

  public void setHitCount(@javax.annotation.Nullable Integer hitCount) {
    this.hitCount = hitCount;
  }


  public ResponseInfo noMatchIds(@javax.annotation.Nullable List<String> noMatchIds) {
    this.noMatchIds = noMatchIds;
    return this;
  }

  public ResponseInfo addNoMatchIdsItem(String noMatchIdsItem) {
    if (this.noMatchIds == null) {
      this.noMatchIds = new ArrayList<>();
    }
    this.noMatchIds.add(noMatchIdsItem);
    return this;
  }

  /**
   * Array of companyIds that was in request but could not be matched
   * @return noMatchIds
   */
  @javax.annotation.Nullable
  public List<String> getNoMatchIds() {
    return noMatchIds;
  }

  public void setNoMatchIds(@javax.annotation.Nullable List<String> noMatchIds) {
    this.noMatchIds = noMatchIds;
  }


  public ResponseInfo requestCount(@javax.annotation.Nullable Integer requestCount) {
    this.requestCount = requestCount;
    return this;
  }

  /**
   * Number of requested companyIds
   * @return requestCount
   */
  @javax.annotation.Nullable
  public Integer getRequestCount() {
    return requestCount;
  }

  public void setRequestCount(@javax.annotation.Nullable Integer requestCount) {
    this.requestCount = requestCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseInfo responseInfo = (ResponseInfo) o;
    return Objects.equals(this.hitCount, responseInfo.hitCount) &&
        Objects.equals(this.noMatchIds, responseInfo.noMatchIds) &&
        Objects.equals(this.requestCount, responseInfo.requestCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hitCount, noMatchIds, requestCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseInfo {\n");
    sb.append("    hitCount: ").append(toIndentedString(hitCount)).append("\n");
    sb.append("    noMatchIds: ").append(toIndentedString(noMatchIds)).append("\n");
    sb.append("    requestCount: ").append(toIndentedString(requestCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hitCount");
    openapiFields.add("noMatchIds");
    openapiFields.add("requestCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseInfo is not found in the empty JSON string", ResponseInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("noMatchIds") != null && !jsonObj.get("noMatchIds").isJsonNull() && !jsonObj.get("noMatchIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noMatchIds` to be an array in the JSON string but got `%s`", jsonObj.get("noMatchIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseInfo>() {
           @Override
           public void write(JsonWriter out, ResponseInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseInfo
   * @throws IOException if the JSON string is invalid with respect to ResponseInfo
   */
  public static ResponseInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseInfo.class);
  }

  /**
   * Convert an instance of ResponseInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


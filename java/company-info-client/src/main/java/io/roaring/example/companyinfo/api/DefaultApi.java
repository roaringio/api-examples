/*
 * Overview
 * Fetch company/companies overview(s)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.roaring.example.companyinfo.api;

import io.roaring.example.companyinfo.invoker.ApiCallback;
import io.roaring.example.companyinfo.invoker.ApiClient;
import io.roaring.example.companyinfo.invoker.ApiException;
import io.roaring.example.companyinfo.invoker.ApiResponse;
import io.roaring.example.companyinfo.invoker.Configuration;
import io.roaring.example.companyinfo.invoker.Pair;
import io.roaring.example.companyinfo.invoker.ProgressRequestBody;
import io.roaring.example.companyinfo.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.roaring.example.companyinfo.model.BadRequest;
import io.roaring.example.companyinfo.model.MultiCompaniesOverviewsResult;
import io.roaring.example.companyinfo.model.MultiCompanyRequest;
import io.roaring.example.companyinfo.model.OverviewsResult;
import io.roaring.example.companyinfo.model.ServerError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for companyIdGet
     * @param companyId id of company (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyIdGetCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{companyId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call companyIdGetValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling companyIdGet(Async)");
        }

        return companyIdGetCall(companyId, _callback);

    }

    /**
     * Find overview by company id
     * It supports date parameter to find overview up to date
     * @param companyId id of company (required)
     * @return OverviewsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public OverviewsResult companyIdGet(String companyId) throws ApiException {
        ApiResponse<OverviewsResult> localVarResp = companyIdGetWithHttpInfo(companyId);
        return localVarResp.getData();
    }

    /**
     * Find overview by company id
     * It supports date parameter to find overview up to date
     * @param companyId id of company (required)
     * @return ApiResponse&lt;OverviewsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OverviewsResult> companyIdGetWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = companyIdGetValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<OverviewsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find overview by company id (asynchronously)
     * It supports date parameter to find overview up to date
     * @param companyId id of company (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call companyIdGetAsync(String companyId, final ApiCallback<OverviewsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = companyIdGetValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<OverviewsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for historyCompanyIdGet
     * @param companyId id of company (required)
     * @param fromDate beginning of the date range (including), iso 8601 format (optional)
     * @param toDate ending of the date range (excluding), iso 8601 format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historyCompanyIdGetCall(String companyId, String fromDate, String toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/history/{companyId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call historyCompanyIdGetValidateBeforeCall(String companyId, String fromDate, String toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling historyCompanyIdGet(Async)");
        }

        return historyCompanyIdGetCall(companyId, fromDate, toDate, _callback);

    }

    /**
     * Find history overview by company id
     * Changes of the company within specified date range. The range includes \&quot;from\&quot; and excludes \&quot;to\&quot;.
     * @param companyId id of company (required)
     * @param fromDate beginning of the date range (including), iso 8601 format (optional)
     * @param toDate ending of the date range (excluding), iso 8601 format (optional)
     * @return OverviewsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public OverviewsResult historyCompanyIdGet(String companyId, String fromDate, String toDate) throws ApiException {
        ApiResponse<OverviewsResult> localVarResp = historyCompanyIdGetWithHttpInfo(companyId, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * Find history overview by company id
     * Changes of the company within specified date range. The range includes \&quot;from\&quot; and excludes \&quot;to\&quot;.
     * @param companyId id of company (required)
     * @param fromDate beginning of the date range (including), iso 8601 format (optional)
     * @param toDate ending of the date range (excluding), iso 8601 format (optional)
     * @return ApiResponse&lt;OverviewsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OverviewsResult> historyCompanyIdGetWithHttpInfo(String companyId, String fromDate, String toDate) throws ApiException {
        okhttp3.Call localVarCall = historyCompanyIdGetValidateBeforeCall(companyId, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<OverviewsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find history overview by company id (asynchronously)
     * Changes of the company within specified date range. The range includes \&quot;from\&quot; and excludes \&quot;to\&quot;.
     * @param companyId id of company (required)
     * @param fromDate beginning of the date range (including), iso 8601 format (optional)
     * @param toDate ending of the date range (excluding), iso 8601 format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historyCompanyIdGetAsync(String companyId, String fromDate, String toDate, final ApiCallback<OverviewsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = historyCompanyIdGetValidateBeforeCall(companyId, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<OverviewsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rootPost
     * @param multiCompanyRequest request body with companies identifiers to lookup (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootPostCall(MultiCompanyRequest multiCompanyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = multiCompanyRequest;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rootPostValidateBeforeCall(MultiCompanyRequest multiCompanyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'multiCompanyRequest' is set
        if (multiCompanyRequest == null) {
            throw new ApiException("Missing the required parameter 'multiCompanyRequest' when calling rootPost(Async)");
        }

        return rootPostCall(multiCompanyRequest, _callback);

    }

    /**
     * Find overviews by companies id-s
     * It supports date parameter to find overviews up to date
     * @param multiCompanyRequest request body with companies identifiers to lookup (required)
     * @return MultiCompaniesOverviewsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public MultiCompaniesOverviewsResult rootPost(MultiCompanyRequest multiCompanyRequest) throws ApiException {
        ApiResponse<MultiCompaniesOverviewsResult> localVarResp = rootPostWithHttpInfo(multiCompanyRequest);
        return localVarResp.getData();
    }

    /**
     * Find overviews by companies id-s
     * It supports date parameter to find overviews up to date
     * @param multiCompanyRequest request body with companies identifiers to lookup (required)
     * @return ApiResponse&lt;MultiCompaniesOverviewsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultiCompaniesOverviewsResult> rootPostWithHttpInfo(MultiCompanyRequest multiCompanyRequest) throws ApiException {
        okhttp3.Call localVarCall = rootPostValidateBeforeCall(multiCompanyRequest, null);
        Type localVarReturnType = new TypeToken<MultiCompaniesOverviewsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find overviews by companies id-s (asynchronously)
     * It supports date parameter to find overviews up to date
     * @param multiCompanyRequest request body with companies identifiers to lookup (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK, successfull response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned when something is wrong in the request, e.g. failed argument validation or arguments are missing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested resource could not be found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred, please contact the system administrator with information on the error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootPostAsync(MultiCompanyRequest multiCompanyRequest, final ApiCallback<MultiCompaniesOverviewsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = rootPostValidateBeforeCall(multiCompanyRequest, _callback);
        Type localVarReturnType = new TypeToken<MultiCompaniesOverviewsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
